<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.fastboot.server.producems.mapper.DemandMapper">
    <resultMap id="demandItemNodes" type="com.example.fastboot.server.producems.model.DemandItem">
        <id property="id" column="demandItemId"/>
        <result property="guid" column="guid"/>
        <result property="demandConfiemedState" column="demandConfiemedState"/>
        <result property="nodeGuid" column="nodeGuid"/>
        <result property="questionAndNotes" column="questionAndNotes"/>
        <result property="severity" column="severity"/>
        <result property="eventStream" column="eventStream"/>
        <association property="nodes" javaType="com.example.fastboot.server.producems.model.Nodes">
            <id column="nodesId" property="id"/>
            <result property="name" column="name"/>
            <result property="guid" column="nodeGuid"/>
        </association>
    </resultMap>
    <insert id="insertDemandtrace">
        INSERT INTO `demandtrace`(guid, produceGuid)
        VALUES (#{guid}, #{produceGuid}, 1);
    </insert>
    <insert id="addDemandtraceAll">
        INSERT INTO `demandtrace`(guid, projectGuid, produceGuid,
                                  demandType, demandDescription, proposer, submitName,
                                  submitTime, priority, dealState)
        VALUES (#{demandtrace.guid}, #{demandtrace.projectGuid}, #{demandtrace.produceGuid},
                #{demandtrace.demandType}, #{demandtrace.demandDescription}, #{demandtrace.proposer},
                #{demandtrace.submitName}, #{demandtrace.submitTime}, #{demandtrace.priority}, 1);
    </insert>
    <insert id="insertDemand">
        insert into demandmanage (guid, produceGuid)
        values (#{demandGuid}, #{produceGuid})
    </insert>
    <insert id="insertNodes">
        insert into nodes (guid,moduleGuid,`name`,classType,nodeType,nodeOrder) values
        <foreach collection="nodelist" index="index" item="item" separator=",">
            ( #{item.guid},#{item.moduleGuid},#{item.name},#{item.classType},#{item.nodeType},#{item.nodeOrder})
        </foreach>
    </insert>
    <insert id="insertDemandterm">
        insert into demandterm (guid, demandGuid, words, `explain`)
        values (#{demandterm.guid}, #{demandterm.demandGuid}, #{demandterm.words}, #{demandterm.explain})
    </insert>
    <insert id="insertIssuestobeconfirmed">
        insert into issuestobeconfirmed (guid, demandGuid, issuesContent)
        values (#{issuestobeconfirmed.guid}, #{issuestobeconfirmed.demandGuid}, #{issuestobeconfirmed.issuesContent})
    </insert>
    <insert id="insertDetaileddesign">
        insert into detaileddesign (guid, nodeGuid, createName, createTime, processAnalysis,
                                    configurationRequirements, classDesign, dbOperate, communicationDesignDescription,
                                    complexLogic, notes)
        values (#{detaileddesign.guid}, #{detaileddesign.nodeGuid}, #{detaileddesign.createName},
                #{detaileddesign.createTime},
                #{detaileddesign.processAnalysis}, #{detaileddesign.configurationRequirements},
                #{detaileddesign.classDesign},
                #{detaileddesign.dbOperate}, #{detaileddesign.communicationDesignDescription},
                #{detaileddesign.complexLogic}, #{detaileddesign.notes})
    </insert>
    <insert id="insertDemandItem">
        insert into demanditem (guid, nodeGuid, degreeOfImportance, priority, demandState, funDescription,
                                preconditions, entry, eventStream, `output`, postconditions, logRecord, otherNotes,
                                question)
        values (#{demanditem.guid}, #{demanditem.nodeGuid}, #{demanditem.degreeOfImportance}, #{demanditem.priority},
                #{demanditem.demandState}, #{demanditem.funDescription}, #{demanditem.preconditions},
                #{demanditem.entry}, #{demanditem.eventStream}, #{demanditem.output}, #{demanditem.postconditions},
                #{demanditem.logRecord}, #{demanditem.otherNotes}, #{demanditem.question})
    </insert>
    <insert id="addDemandChangeRecord">
        insert into demandchangerecord (guid, demandGuid, changeName, nodeGuid)
        values (#{demandchangerecord.guid}, #{demandchangerecord.demandGuid}, #{demandchangerecord.changeName},
                #{demandchangerecord.nodeGuid})
    </insert>
    <update id="updateDemandConfirmDetail">
        update demanditem
        set demandConfiemedState=#{demandConfiemedState},
            questionAndNotes=#{questionAndNotes},
            severity            = #{severity}
        where guid = #{guid}
    </update>
    <update id="updateDemandTranceConfirmName">
        update demandtrace
        set demandConfirmName=#{userName}
        where nodeGuid = #{nodeGuid}
    </update>
    <update id="updateDealState">
        update demanditem
        set demandConfiemedState=#{status}
        where nodeGuid = #{nodeGuid}
    </update>
    <update id="updateDemandTraceDetailDes">
        update `demandtrace`
        set detailDescription= #{detailDescription}
        where guid = #{guid}
    </update>
    <update id="updateDemandtrace">
        update `demandtrace`
        set
        <if test="demandtrace.finishTime!=null">
            finishTime=#{demandtrace.finishTime},
        </if>
        <if test="demandtrace.finishTime=null">
            finishTime='1970-01-01 00:00:00',
        </if>
        <if test="demandtrace.submitTime!=null">
            submitTime=#{demandtrace.submitTime},
        </if>
        <if test="demandtrace.submitTime=null">
            submitTime='1970-01-01 00:00:00',
        </if>
        guid=#{demandtrace.guid},
        projectGuid=#{demandtrace.projectGuid},
        demandType=#{demandtrace.demandType},
        demandDescription=#{demandtrace.demandDescription},
        proposer=#{demandtrace.proposer},
        submitName=#{demandtrace.submitName},
        priority=#{demandtrace.priority},
        techManager=#{demandtrace.techManager},
        reviewFlag=#{demandtrace.reviewFlag},
        demandName=#{demandtrace.demandName},
        reviewName=#{demandtrace.reviewName},
        developName=#{demandtrace.developName},
        devlopFinishName=#{demandtrace.devlopFinishName},
        demandConfirmName=#{demandtrace.demandConfirmName},
        checkName=#{demandtrace.checkName},
        dealState=#{demandtrace.dealState},
        notes=#{demandtrace.notes}
        where guid = #{demandtrace.guid}
    </update>
    <update id="statusTransfer">
        update demandmanage
        set staus=#{staus}
        where guid = #{guid}
    </update>
    <update id="updateDemand">
        update demandmanage
        <set>
            <if test="reviewComments!=null and reviewComments!=''">
                reviewComments=#{reviewComments},
            </if>
            <if test="objective!=null and objective!=''">
                objective=#{objective},
            </if>
            <if test="reader!=null and reader!=''">
                reader=#{reader},
            </if>
        </set>
        where guid=#{guid}
    </update>
    <update id="updateDemandterm">
        update demandterm
        set words=#{demandterm.words},
            `explain`=#{demandterm.explain}
        where guid = #{demandterm.guid}
    </update>
    <update id="updateIssuestobeconfirmed">
        update issuestobeconfirmed
        set issuesContent=#{issuestobeconfirmed.issuesContent}
        where guid = #{issuestobeconfirmed.guid}
    </update>
    <update id="updateDetaileddesign">
        update detaileddesign
        set createName=#{detaileddesign.createName},
            createTime=#{detaileddesign.createTime},
            processAnalysis=#{detaileddesign.processAnalysis},
            configurationRequirements=#{detaileddesign.configurationRequirements},
            classDesign=#{detaileddesign.classDesign},
            dbOperate=#{detaileddesign.dbOperate},
            communicationDesignDescription=#{detaileddesign.communicationDesignDescription},
            `complexLogic`=#{detaileddesign.complexLogic},
            notes=#{detaileddesign.notes}
        where guid = #{detaileddesign.guid}
    </update>
    <update id="updateDemandItem">
        update demanditem
        set degreeOfImportance=#{demanditem.degreeOfImportance},
            priority=#{demanditem.priority},
            demandState=#{demanditem.demandState},
            funDescription=#{demanditem.funDescription},
            preconditions=#{demanditem.preconditions},
            entry=#{demanditem.entry},
            eventStream=#{demanditem.eventStream},
            `output`=#{demanditem.output},
            postconditions=#{demanditem.postconditions},
            logRecord=#{demanditem.logRecord},
            otherNotes=#{demanditem.otherNotes},
            question=#{demanditem.question}
        where guid = #{demanditem.guid}
    </update>
    <update id="clearNodeGuid">
        update demandtrace set nodeGuid='',demandName=''
        where guid in (
        <foreach collection="demandTraceGuids" item="item" index="index" open="" close="" separator=",">
            #{item}
        </foreach>
        ) and nodeGuid=#{nodeGuid}
    </update>
    <update id="updateNodeGuid">
        update demandtrace set nodeGuid=#{nodeGuid},demandName=#{creatUserName}
        where guid in (
        <foreach collection="demandTraceGuids" item="item" index="index" open="" close="" separator=",">
            #{item}
        </foreach>
        )
    </update>
    <delete id="deleteteDemandTrace">
        update demandtrace
        set deleteFlag=1
        where guid = #{guid}
    </delete>
    <delete id="deleteDemand">
        update demandmanage
        set deleteFlag=1
        where guid in
        <foreach collection="guids" item="item" close=")" open="(" separator=",">
            #{item}
        </foreach>
    </delete>
    <delete id="deleteDemandTerm">
        update demandterm
        set deleteFlag=1
        where guid = #{guid}
    </delete>
    <delete id="deleteIssuesToBeConfirmed">
        update issuestobeconfirmed
        set deleteFlag=1
        where guid = #{guid}
    </delete>
    <select id="getDemand" resultType="com.example.fastboot.server.producems.model.Demandmanage">
        select * from demandmanage
        <where>
            deleteFlag=0
            <if test="guid !=null and guid!=''">
                and guid = #{guid}
            </if>
            <if test="produceGuid !=null and produceGuid!=''">
                and produceGuid=#{produceGuid}
            </if>
            <if test="objective !=null and objective!=''">
                and objective=#{objective}
            </if>
        </where>
    </select>
    <select id="countDemandConfirm" resultType="com.example.fastboot.server.producems.vo.DemandConfirmStateCountVo">
        SELECT t1.demandConfiemedState,
               count(t1.demandConfiemedState) count
        FROM
            demanditem t1
            INNER JOIN nodes t2
        ON t1.nodeGuid = t2.guid
            RIGHT JOIN demandmanage t3 ON t3.guid = t2.moduleGuid
        WHERE
            t3.produceGuid = #{guid}
          AND t1.deleteFlag = 0
          AND t3.deleteFlag = 0
          AND t2.deleteFlag = 0
          AND t2.classType = 1
          AND t2.nodeType = 1
        GROUP BY
            t1.demandConfiemedState
    </select>
    <select id="countDevFinish" resultType="java.lang.Integer">
        select COUNT(dc.id)
        from demandtrace dc
        where dc.devlopFinishName!='' and dc.produceGuid=#{produceGuid}
          and dc.deleteFlag=0
    </select>
    <select id="listNodes" resultType="com.example.fastboot.server.producems.model.Nodes">
        select *
        from nodes inner join demandmanage on nodes.moduleGuid=demandmanage.guid
        <where>
            <if test="moduleGuid!=null and moduleGuid!=''">
                moduleGuid = #{moduleGuid}
            </if>
            and demandmanage.produceGuid=#{produceGuid}
            and nodes.deleteFlag = 0
        </where>
    </select>
    <select id="listDemandConfirmDetail" resultMap="demandItemNodes">
        SELECT
        *
        FROM
        demanditem
        INNER JOIN nodes ON nodes.guid = demanditem.nodeGuid
        WHERE
        nodes.moduleGuid = #{demandGuid} and nodes.classType=1 and nodeType=1
        <if test="demandConfirmedState!=null and demandConfirmedState[0]!=100 ">
            and demandConfiemedState in
            <foreach collection="demandConfirmedState" item="item" open="(" close=")"
                     index="index" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="severity!='100' ">
            and severity=#{severity}
        </if>
        and demanditem.deleteFlag=0 and nodes.deleteFlag=0
    </select>
    <select id="countDemandTranceByNodeGuid" resultType="java.lang.Integer">
        SELECT count(*)
        from demandtrace dt
        where dt.nodeGuid = #{nodeGuid}
          and dt.deleteFlag = 0

    </select>
    <select id="getNodes" resultType="com.example.fastboot.server.producems.model.DemandItem">
        select demanditem.*,nodes.name demandName
        from demanditem inner join nodes on demanditem.nodeGuid=nodes.guid
        where nodeGuid = #{guid}
    </select>
    <select id="listDemandTraceByProduce" resultType="com.example.fastboot.server.producems.model.Demandtrace">
        select t1.produceGuid
        from demandtrace t1
        inner join producemanage t2 on t1.produceGuid = t2.guid
        <where>
            t1.deleteFlag = 0 and t1.produceGuid !='' and t2.deleteFlag = 0
            <if test="producemanage.name !=null and producemanage.name!=''">
                and t2.name like CONCAT('%',#{producemanage.name},'%')
            </if>
            <if test="producemanage.number !=null and producemanage.number!=''">
                and t2.number like CONCAT('%',#{producemanage.number},'%')
            </if>
            <if test="produceGuids.length!=0">
                and t1.produceGuid in
                <foreach collection="produceGuids" separator="," close=")" open="(" item="item">
                    #{item}
                </foreach>
            </if>
        </where>
        group by t1.produceGuid
    </select>
    <select id="listAllDemandTraceByProduce"
            resultType="com.example.fastboot.server.producems.model.Demandtrace">
        select t1.*
        from demandtrace t1
        inner join producemanage t2 on t1.produceGuid = t2.guid
        <where>
            t1.deleteFlag = 0 and t1.produceGuid !='' and t2.deleteFlag = 0 and t1.dealState!=0
            <if test="producemanage.name !=null and producemanage.name!=''">
                and t2.name like CONCAT('%',#{producemanage.name},'%')
            </if>
            <if test="producemanage.number !=null and producemanage.number!=''">
                and t2.number like CONCAT('%',#{producemanage.number},'%')
            </if>
            <if test="produceGuids.length!=0">
                and t1.produceGuid in
                <foreach collection="produceGuids" separator="," close=")" open="(" item="item">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>
    <select id="listDistinctDemandTraceProduceGuid" resultType="java.lang.String">
        select distinct produceGuid
        from demandtrace
    </select>

    <select id="listDemandTrace" resultType="com.example.fastboot.server.producems.model.Demandtrace">
        select * from demandtrace
        <where>deleteFlag=0 and produceGuid = #{demandtrace.produceGuid} and dealState!=0
            <if test="demandtrace.demandType!=100 ">
                and demandType=#{demandtrace.demandType}
            </if>
            <if test="demandtrace.priority!=100 ">
                and priority=#{demandtrace.priority}
            </if>
            <if test="demandtrace.demandDescription!=null and demandtrace.demandDescription!=''">
                and demandDescription like concat('%',#{demandtrace.demandDescription},'%')
            </if>
            and (
            <if test="progressStatusList!=null and progressStatusList.size>0">
                <if test='progressStatusList.contains("1")'>
                    techManager=''
                    <if test='progressStatusList.contains("2")'>
                        or
                    </if>
                </if>
                <if test='progressStatusList.contains("2")'>
                    (techManager != '' and dealState =2)
                    <if test='progressStatusList.contains("3")'>
                        or
                    </if>
                </if>
                <if test='progressStatusList.contains("3")'>
                    (reviewFlag = 1 and reviewName = '')
                    <if test='progressStatusList.contains("4")'>
                        or
                    </if>
                </if>
                <if test='progressStatusList.contains("4")'>
                    (reviewName != '' and developName = '')
                    <if test='progressStatusList.contains("5")'>
                        or
                    </if>
                </if>
                <if test='progressStatusList.contains("5")'>
                    (developName != '' and devlopFinishName = '')
                    <if test='progressStatusList.contains("6")'>
                        or
                    </if>
                </if>
                <if test='progressStatusList.contains("6")'>
                    (devlopFinishName != '' and demandConfirmName = '')
                    <if test='progressStatusList.contains("7")'>
                        or
                    </if>
                </if>
                <if test='progressStatusList.contains("7")'>
                    (checkName = '' and demandConfirmName != '')
                    <if test='progressStatusList.contains("8")'>
                        or
                    </if>
                </if>
                <if test='progressStatusList.contains("8")'>
                    (dealState = 3)
                    <if test='progressStatusList.contains("9")'>
                        or
                    </if>
                </if>
                <if test='progressStatusList.contains("9")'>
                    ( dealState =6)
                    <if test='progressStatusList.contains("10")'>
                        or
                    </if>
                </if>
                <if test='progressStatusList.contains("10")'>
                    ( dealState =5)
                    <if test='progressStatusList.contains("11")'>
                        or
                    </if>
                </if>
                <if test='progressStatusList.contains("11")'>
                    (checkName != '')
                </if>
            </if>
            )
        </where>
        order by createTime desc
    </select>
    <select id="countStatusDemand" resultType="com.example.fastboot.server.producems.vo.DocumentStatusCountVo">
        select t1.staus status,count(t1.staus) count from demandmanage t1 INNER JOIN producemanage t2 on
        t1.produceGuid=t2.guid
        where t1.deleteFlag = 0 and
        t2.deleteFlag = 0
        <if test="produceGuids.length!=0">
            and t2.guid in
            <foreach collection="produceGuids" separator="," item="item" index="index" open="(" close=")">
                #{item}
            </foreach>
        </if>
        group by t1.staus
    </select>
    <select id="listDistinctDemandProduceGuid" resultType="java.lang.String">
        select distinct produceGuid
        from demandmanage
    </select>
    <select id="listDemandChangeRecord"
            resultType="com.example.fastboot.server.producems.model.Demandchangerecord">
        select *
        from demandchangerecord
                 inner join nodes on demandchangerecord.nodeGuid = nodes.guid
        where demandchangerecord.demandGuid = #{demandGuid}
          and demandchangerecord.deleteFlag = 0
    </select>
    <select id="listDemandTerm" resultType="com.example.fastboot.server.producems.model.Demandterm">
        select *
        from demandterm
        where deleteFlag = 0
          and demandGuid = #{demandGuid}
        order by id desc
    </select>
    <select id="listIssuesToBeConfirmed"
            resultType="com.example.fastboot.server.producems.model.Issuestobeconfirmed">
        select *
        from issuestobeconfirmed
        where deleteFlag = 0
          and demandGuid = #{guid} order by id desc
    </select>
    <select id="getDetatilDesign" resultType="com.example.fastboot.server.producems.model.Detaileddesign">
        select *
        from detaileddesign
        where nodeGuid = #{nodeGuid}
          and deleteFlag = 0
    </select>
    <select id="countDemandTrcaeByNodeGuid" resultType="java.lang.Integer">
        select count(*) from demandtrace dt where dt.nodeGuid = #{nodeGuid} and reviewFlag=false and dt.deleteFlag=0

    </select>

</mapper>
